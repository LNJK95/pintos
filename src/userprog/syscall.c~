#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "filesys/filesys.h"

//include bools
#include <stdbool.h>

static void syscall_handler (struct intr_frame *);

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  //printf ("system call!\n");
  int *syscall_no = f->esp;
  void *buffer;
  char *file;
  switch(*syscall_no) {
  case(SYS_HALT) :
    halt();
    break;
  case(SYS_EXIT) :
    exit(0);
    break;
  case(SYS_READ) :
    read(0, buffer, 1);
    break;
  case(SYS_WRITE) :
    write(0, buffer, 1);
    break;
  case(SYS_CLOSE) :
    close(1);
    break;
  case(SYS_OPEN) :
    open(file);
    break;
  case(SYS_CREATE) :
    create(file, 1);
    break;
  default :
    break;
  }

  thread_exit ();
}

void halt() {
  power_off();
}

void exit(int status) {
  thread_exit();
}

int write(int fd, const void *buffer, unsigned size) {
  /*
    confirm fd is open
    check if console, special case
    iterate over size to buffer
    check for end of file
*/
  return 1;
}

int read(int fd, void *buffer, unsigned size) {
  return 1;
}

void close(int fd) {

}

int open(const char *file) {
  filesys_open(file);
}

bool create(const char *file, unsigned initial_size) {
  return filesys_create(file, initial_size);
}

